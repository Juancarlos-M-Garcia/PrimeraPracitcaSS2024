package com.practica1.analizador;

import java_cup.runtime.*;
import com.practica1.emuns.token.*;
import com.practica1.utilities.ReportData;
import com.practica1.utilities.Analisis;
import com.practica1.objects.Figure;
import java.util.ArrayList;


parser code
{:

    private boolean graphFlag= false;
    private double resultado;
    private String datos;

    private ArrayList<Object> ListadoObjetos = new ArrayList<Object>();


    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    /**\
    * Método al que se llama cuando se identifica un error sintáctico en el que
    * ya no es posible una recuperación de errores.
    **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }

:}


terminal GRAPH, ANIME, CIRCLE, SQUARE, RECTA, POLY, LINE;
terminal CURVE, OBJECT, BEFORE, RED, BLUE, YELLOW, GREEN, BROWN, BLACK, WHITE;
terminal PINK, PURPLE, ID, NUM, DECIMAL, OPPAR, CLPAR, DASH, PLUS, ASTER, SLASH, COMMA;
non terminal s, gs, as, ta, fig,  col,  rec, int, i, gse, expresion, term, data;

precedence left PLUS;
precedence left DASH;
precedence left SLASH;
precedence left ASTER;
start with i;

i::=error s
    | s:i;

s::=s:a gs:b    {: ListadoObjetos.add(a); ListadoObjetos.add(b);    :}
    |s:aa as:a  {: ListadoObjetos.add(aa); ListadoObjetos.add(a);   :}
    |gs:g       {: RESULT = g ;  :}
    |as:a       {: RESULT = a ;   :};

gs::=GRAPH gse:gr   {:RESULT = gr; :};

gse::=fig:x OPPAR ID:a COMMA int:b COMMA int:c COMMA int:d COMMA col:e CLPAR    {:
            RESULT = Analisis.CreateFigure((Figures)x, a.toString(), Double.parseDouble(b.toString()), Double.parseDouble(c.toString()), Double.parseDouble(d.toString()), (Colors)e);
            :}
    |rec:x OPPAR ID:a COMMA int:b COMMA int:c COMMA int:d COMMA int:e COMMA col:f CLPAR   {:
            RESULT = Analisis.CreateFigure((Figures)x, a.toString(), Double.parseDouble(b.toString()), Double.parseDouble(c.toString()), Double.parseDouble(d.toString()), Double.parseDouble(e.toString()),(Colors)f);
            :}
    |POLY OPPAR ID:a COMMA int:b COMMA int:c COMMA int:d COMMA int:e COMMA int:f COMMA col:g CLPAR {:
            RESULT = Analisis.CreateFigure(a.toString(), Double.parseDouble(b.toString()), Double.parseDouble(c.toString()), Integer.parseInt(d.toString()),  Double.parseDouble(e.toString()), Double.parseDouble(f.toString()), (Colors)g );  :};

as::=ANIME OBJECT BEFORE OPPAR ta:a COMMA int:b COMMA int:c COMMA int:d CLPAR {:
            RESULT = Analisis.CreateAnimation((Animations)a, Double.parseDouble(b.toString()),Double.parseDouble(c.toString()),Double.parseDouble(d.toString()));  :};

ta::=LINE   {:RESULT = Animations.LINE; :}
    |CURVE  {:RESULT = Animations.CURVE; :};

fig::= CIRCLE   {:RESULT = Figures.CIRCULO; :}
    | SQUARE    {:RESULT = Figures.CUADRADO; :};

rec::= LINE     {:RESULT = Figures.LINEA; :}
    | RECTA     {:RESULT = Figures.RECTANGULO; :};

col::= BLACK:c     {: RESULT = Colors.BLACK; :}
    | BLUE:c       {: RESULT = Colors.BLUE; :}
    | BROWN:c      {: RESULT = Colors.BROWN; :}
    | GREEN:c      {: RESULT = Colors.GREEN; :}
    | PINK:c       {: RESULT = Colors.PINK; :}
    | PURPLE:c     {: RESULT = Colors.PURPLE; :}
    | RED:c        {: RESULT = Colors.RED; :}
    | WHITE:c      {: RESULT = Colors.WHITE; :}
    | YELLOW:c      {: RESULT= Colors.YELLOW; :};

int::= expresion:exp                {:  RESULT = exp;  :}  ;


term::= data:da                     {:  RESULT = da; :}
       | term:op3 ASTER data:op2    {:  RESULT = Analisis.operar(Actions.MULTI, op3.toString(), op2.toString(), op3+"*"+op2 ); :}
       | term:op4 SLASH data:op2    {:  RESULT = Analisis.operar(Actions.DIV, op4.toString(), op2.toString(), op4+"/"+op2); :};

data::= NUM:n                       {: RESULT = n.toString(); :}
    | DECIMAL:d                     {: RESULT = d.toString(); :}
    | OPPAR expresion:op5 CLPAR     {: RESULT = op5; :};

expresion::= term:t                 {: RESULT = t; :}
    | expresion:op6 PLUS term:op2   {: RESULT = Analisis.operar(Actions.ADD, op6.toString(), op2.toString(), op6+"+"+op2 ); :}
    | expresion:op7 DASH term:op2   {: RESULT = Analisis.operar(Actions.LESS, op7.toString(), op2.toString(), op7+"-"+op2); :};


