
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.practica1.analizador;

import java_cup.runtime.*;
import com.practica1.emuns.token.*;
import com.practica1.utilities.ReportData;
import com.practica1.utilities.Analisis;
import com.practica1.objects.Figure;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\012\004\000\002\012" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\003" +
    "\000\002\002\003\000\002\003\004\000\002\013\016\000" +
    "\002\013\020\000\002\013\022\000\002\004\016\000\002" +
    "\005\003\000\002\005\003\000\002\006\003\000\002\006" +
    "\003\000\002\010\003\000\002\010\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\011\003\000\002\015" +
    "\003\000\002\015\005\000\002\015\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\014\003\000" +
    "\002\014\005\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\010\003\006\004\012\005\007\001\002\000" +
    "\010\002\ufffb\004\ufffb\005\ufffb\001\002\000\010\002\ufffc" +
    "\004\ufffc\005\ufffc\001\002\000\006\004\012\005\007\001" +
    "\002\000\004\014\126\001\002\000\004\002\125\001\002" +
    "\000\010\002\uffff\004\012\005\007\001\002\000\014\006" +
    "\015\007\016\010\021\011\013\012\017\001\002\000\004" +
    "\032\104\001\002\000\010\002\ufffa\004\ufffa\005\ufffa\001" +
    "\002\000\004\032\ufff3\001\002\000\004\032\ufff2\001\002" +
    "\000\004\032\ufff1\001\002\000\004\032\071\001\002\000" +
    "\004\032\ufff0\001\002\000\004\032\023\001\002\000\004" +
    "\027\024\001\002\000\004\040\025\001\002\000\010\030" +
    "\026\031\033\032\031\001\002\000\016\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\004\040" +
    "\047\001\002\000\016\033\uffdf\034\uffdf\035\uffdf\036\040" +
    "\037\041\040\uffdf\001\002\000\010\030\026\031\033\032" +
    "\031\001\002\000\016\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\001\002\000\016\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002\000\012\033\uffe6" +
    "\034\035\035\036\040\uffe6\001\002\000\010\030\026\031" +
    "\033\032\031\001\002\000\010\030\026\031\033\032\031" +
    "\001\002\000\016\033\uffde\034\uffde\035\uffde\036\040\037" +
    "\041\040\uffde\001\002\000\010\030\026\031\033\032\031" +
    "\001\002\000\010\030\026\031\033\032\031\001\002\000" +
    "\016\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\001\002\000\016\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\001\002\000\016\033\uffdd\034\uffdd\035\uffdd" +
    "\036\040\037\041\040\uffdd\001\002\000\010\033\046\034" +
    "\035\035\036\001\002\000\016\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\001\002\000\010\030\026\031" +
    "\033\032\031\001\002\000\004\040\051\001\002\000\010" +
    "\030\026\031\033\032\031\001\002\000\004\040\053\001" +
    "\002\000\010\030\026\031\033\032\031\001\002\000\004" +
    "\040\055\001\002\000\024\016\066\017\063\020\065\021" +
    "\056\022\061\023\067\024\060\025\062\026\064\001\002" +
    "\000\004\033\uffec\001\002\000\004\033\070\001\002\000" +
    "\004\033\uffe8\001\002\000\004\033\uffed\001\002\000\004" +
    "\033\uffeb\001\002\000\004\033\uffee\001\002\000\004\033" +
    "\uffea\001\002\000\004\033\uffe7\001\002\000\004\033\uffe9" +
    "\001\002\000\004\033\uffef\001\002\000\010\002\ufff8\004" +
    "\ufff8\005\ufff8\001\002\000\004\027\072\001\002\000\004" +
    "\040\073\001\002\000\010\030\026\031\033\032\031\001" +
    "\002\000\004\040\075\001\002\000\010\030\026\031\033" +
    "\032\031\001\002\000\004\040\077\001\002\000\010\030" +
    "\026\031\033\032\031\001\002\000\004\040\101\001\002" +
    "\000\024\016\066\017\063\020\065\021\056\022\061\023" +
    "\067\024\060\025\062\026\064\001\002\000\004\033\103" +
    "\001\002\000\010\002\ufff9\004\ufff9\005\ufff9\001\002\000" +
    "\004\027\105\001\002\000\004\040\106\001\002\000\010" +
    "\030\026\031\033\032\031\001\002\000\004\040\110\001" +
    "\002\000\010\030\026\031\033\032\031\001\002\000\004" +
    "\040\112\001\002\000\010\030\026\031\033\032\031\001" +
    "\002\000\004\040\114\001\002\000\010\030\026\031\033" +
    "\032\031\001\002\000\004\040\116\001\002\000\010\030" +
    "\026\031\033\032\031\001\002\000\004\040\120\001\002" +
    "\000\024\016\066\017\063\020\065\021\056\022\061\023" +
    "\067\024\060\025\062\026\064\001\002\000\004\033\122" +
    "\001\002\000\010\002\ufff7\004\ufff7\005\ufff7\001\002\000" +
    "\010\002\ufffd\004\ufffd\005\ufffd\001\002\000\010\002\ufffe" +
    "\004\ufffe\005\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\015\127\001\002\000\004\032\130\001\002\000\006" +
    "\012\132\013\133\001\002\000\004\040\134\001\002\000" +
    "\004\040\ufff5\001\002\000\004\040\ufff4\001\002\000\010" +
    "\030\026\031\033\032\031\001\002\000\004\040\136\001" +
    "\002\000\010\030\026\031\033\032\031\001\002\000\004" +
    "\040\140\001\002\000\010\030\026\031\033\032\031\001" +
    "\002\000\004\033\142\001\002\000\010\002\ufff6\004\ufff6" +
    "\005\ufff6\001\002\000\010\002\000\004\012\005\007\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\012\002\010\003\004\004\003\012\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\142" +
    "\003\004\004\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\123\004\122\001\001\000\010\006\017" +
    "\010\021\013\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\026\014\033" +
    "\015\027\016\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\044\015\027\016\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\043\016\031\001\001\000\006\015\036" +
    "\016\031\001\001\000\002\001\001\000\004\016\042\001" +
    "\001\000\004\016\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\047\014\033\015\027\016\031\001\001" +
    "\000\002\001\001\000\012\011\051\014\033\015\027\016" +
    "\031\001\001\000\002\001\001\000\012\011\053\014\033" +
    "\015\027\016\031\001\001\000\002\001\001\000\004\007" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\073\014\033\015\027\016\031" +
    "\001\001\000\002\001\001\000\012\011\075\014\033\015" +
    "\027\016\031\001\001\000\002\001\001\000\012\011\077" +
    "\014\033\015\027\016\031\001\001\000\002\001\001\000" +
    "\004\007\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\106\014" +
    "\033\015\027\016\031\001\001\000\002\001\001\000\012" +
    "\011\110\014\033\015\027\016\031\001\001\000\002\001" +
    "\001\000\012\011\112\014\033\015\027\016\031\001\001" +
    "\000\002\001\001\000\012\011\114\014\033\015\027\016" +
    "\031\001\001\000\002\001\001\000\012\011\116\014\033" +
    "\015\027\016\031\001\001\000\002\001\001\000\004\007" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\134\014\033\015\027\016\031\001\001\000\002\001\001" +
    "\000\012\011\136\014\033\015\027\016\031\001\001\000" +
    "\002\001\001\000\012\011\140\014\033\015\027\016\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\123\004\122\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    /**\
    * Método al que se llama cuando se identifica un error sintáctico en el que
    * ya no es posible una recuperación de errores.
    **/
    public void unrecovered_syntax_error(Symbol s) throws Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= i EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // i ::= error s 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // i ::= s 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= s gs 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((Symbol)CUP$parser$stack.peek()).left;
		int bright = ((Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Analisis.addObjectToGraph(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= s as 
            {
              Object RESULT =null;
		int aaleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object aa = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((Symbol)CUP$parser$stack.peek()).left;
		int aright = ((Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Analisis.addObjectToGraph(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= gs 
            {
              Object RESULT =null;
		int gleft = ((Symbol)CUP$parser$stack.peek()).left;
		int gright = ((Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Analisis.addObjectToGraph(g);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s ::= as 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$parser$stack.peek()).left;
		int aright = ((Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Analisis.addObjectToGraph(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // gs ::= GRAPH gse 
            {
              Object RESULT =null;
		int grleft = ((Symbol)CUP$parser$stack.peek()).left;
		int grright = ((Symbol)CUP$parser$stack.peek()).right;
		Object gr = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = gr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gs",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // gse ::= fig OPPAR ID COMMA int COMMA int COMMA int COMMA col CLPAR 
            {
              Object RESULT =null;
		int xleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object x = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object a = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = Analisis.CreateFigure((Figures)x, a.toString(), Double.parseDouble(b.toString()), Double.parseDouble(c.toString()), Double.parseDouble(d.toString()), (Colors)e);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gse",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // gse ::= rec OPPAR ID COMMA int COMMA int COMMA int COMMA int COMMA col CLPAR 
            {
              Object RESULT =null;
		int xleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int xright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object x = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object a = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object c = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = Analisis.CreateFigure((Figures)x, a.toString(), Double.parseDouble(b.toString()), Double.parseDouble(c.toString()), Double.parseDouble(d.toString()), Double.parseDouble(e.toString()),(Colors)f);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gse",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // gse ::= POLY OPPAR ID COMMA int COMMA int COMMA int COMMA int COMMA int COMMA col CLPAR 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int aright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object a = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object c = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = Analisis.CreateFigure(a.toString(), Double.parseDouble(b.toString()), Double.parseDouble(c.toString()), Integer.parseInt(d.toString()),  Double.parseDouble(e.toString()), Double.parseDouble(f.toString()), (Colors)g );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gse",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // as ::= ANIME OBJECT BEFORE OPPAR ta COMMA int COMMA int COMMA int CLPAR 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = Analisis.CreateAnimation((Animations)a, Double.parseDouble(b.toString()),Double.parseDouble(c.toString()),Double.parseDouble(d.toString()));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ta ::= LINE 
            {
              Object RESULT =null;
		RESULT = Animations.LINE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ta",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ta ::= CURVE 
            {
              Object RESULT =null;
		RESULT = Animations.CURVE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ta",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fig ::= CIRCLE 
            {
              Object RESULT =null;
		RESULT = Figures.CIRCULO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fig",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fig ::= SQUARE 
            {
              Object RESULT =null;
		RESULT = Figures.CUADRADO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fig",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rec ::= LINE 
            {
              Object RESULT =null;
		RESULT = Figures.LINEA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rec ::= RECTA 
            {
              Object RESULT =null;
		RESULT = Figures.RECTANGULO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // col ::= BLACK 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Colors.BLACK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // col ::= BLUE 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Colors.BLUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // col ::= BROWN 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Colors.BROWN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // col ::= GREEN 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Colors.GREEN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // col ::= PINK 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Colors.PINK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // col ::= PURPLE 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Colors.PURPLE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // col ::= RED 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Colors.RED; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // col ::= WHITE 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Colors.WHITE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // col ::= YELLOW 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= Colors.YELLOW; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // int ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((Symbol)CUP$parser$stack.peek()).left;
		int expright = ((Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((Symbol) CUP$parser$stack.peek()).value;
		  RESULT = exp;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int",7, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term ::= data 
            {
              Object RESULT =null;
		int daleft = ((Symbol)CUP$parser$stack.peek()).left;
		int daright = ((Symbol)CUP$parser$stack.peek()).right;
		Object da = (Object)((Symbol) CUP$parser$stack.peek()).value;
		  RESULT = da; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= term ASTER data 
            {
              Object RESULT =null;
		int op3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op3 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Analisis.operar(Actions.MULTI, op3.toString(), op2.toString(), op3+"*"+op2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= term SLASH data 
            {
              Object RESULT =null;
		int op4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op4 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Analisis.operar(Actions.DIV, op4.toString(), op2.toString(), op4+"/"+op2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // data ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nright = ((Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // data ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dright = ((Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // data ::= OPPAR expresion CLPAR 
            {
              Object RESULT =null;
		int op5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op5; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= term 
            {
              Object RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.peek()).left;
		int tright = ((Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion PLUS term 
            {
              Object RESULT =null;
		int op6left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op6right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op6 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Analisis.operar(Actions.ADD, op6.toString(), op2.toString(), op6+"+"+op2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion DASH term 
            {
              Object RESULT =null;
		int op7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op7 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Analisis.operar(Actions.LESS, op7.toString(), op2.toString(), op7+"-"+op2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
